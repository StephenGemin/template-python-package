[build-system]
# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#writing-pyproject-toml
# TODO: use third party until uv natively supports dynamic versioning
# Issues: 8714, 14037, 11718
requires = ['hatchling >= 1.26', 'uv-dynamic-versioning']
build-backend = 'hatchling.build'

[tool.hatch.version]
# TODO: remove when uv natively supports dynamic versioning
source = 'uv-dynamic-versioning'

[project]
name = '{{cookiecutter.project_name}}'
dynamic = ['version']
description = '{{cookiecutter.short_description}}'
requires-python = '>=3.10'
dependencies = []
authors = [
  {name = '{{cookiecutter.author_name}}', email = '{{cookiecutter.author_email}}'},
]
readme = 'README.md'
license = {file = 'LICENSE'}
keywords = []
classifiers = [
  # Full List: https://pypi.org/classifiers/
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: Other/Proprietary License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Operating System :: OS Independent",
]

[dependency-groups]
dev = [
  'pytest',
  'pytest-timeout',
  'pytest-randomly',
  'coverage',
  'pre-commit',
  'ruff',
]

[project.urls]
Homepage = 'https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}/'
# Documentation = 'https://readthedocs.org'
Repository = 'https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}/'
Issues = 'https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}/issues'
# Changelog = 'https://github.com/me/spam/blob/master/CHANGELOG.md'


[tool.ruff.lint]
select = [
    'B',        # flake8-bugbear,
    'C9',       # mccabe
    'C4',       # flake8-comprehensions
    'E', 'W',   # pycodestyle
    'F',        # pyflakes
    'I',        # isort
    'ISC',      # flake8-implicit-str-concat
    'N',        # pep8-naming
    'PL',       # pylint
    'RUF',      # Ruff specific rules
]
ignore = [
    'E501',     # Never enforce line length violations, leave it up to the formatter
    # Avoid conflicting rules between lint and format
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    'W191',     # tab-indentation
    'E111',     # indentation-with-invalid-multiple
    'E114',     # indentation-with-invalid-multiple-comment
    'E117',     # over-indented
    'D206',     # docstring-tab-indentation
    'D300',     # triple-single-quotes
    'Q000',     # bad-quotes-inline-string
    'Q001',     # bad-quotes-multiline-string
    'Q002',     # bad-quotes-docstring
    'Q003',     # avoidable-escaped-quote
    'COM812',   # missing-trailing-comma
    'COM819',   # prohibited-trailing-comma
    'ISC002',   # multi-line-implicit-string-concatenation (if used without ISC001 and allow-multiline = false)
]

[tool.ruff.lint.per-file-ignores]
'__init__.py' = [
    'F401'  # unused imports
]


[tool.pytest.ini_options]
# https://docs.pytest.org/en/stable/explanation/goodpractices.html#tests-outside-application-code
pythonpath = 'src'
addopts = '--import-mode=importlib --strict-markers'
testpaths = 'tests'
timeout = 5

[tool.coverage.run]
branch = true
source = ['src']

[tool.coverage.report]
omit = ['tests/']
# fail_under = 80
precision = 2
show_missing = true
exclude_also = [
  'pragma: no cover',
  'def __repr__',
  'if self\\.debug:',
  'if settings.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'if __name__ == .__main__.:',
  'if TYPE_CHECKING:',
  'class.*\(\bProtocol\b\):',
  '@(abc\.)?abstractmethod',
]
